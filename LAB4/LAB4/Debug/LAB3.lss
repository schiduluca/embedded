
LAB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00000c34  00000cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000fe  008000fe  00000d66  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001e2  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00001bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000287  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000184a  00000000  00000000  00001f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b33  00000000  00000000  000037df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001971  00000000  00000000  00004312  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00005c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000536  00000000  00000000  00005ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c6a  00000000  00000000  000063da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000202  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  00007246  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3f       	cpi	r26, 0xFE	; 254
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae ef       	ldi	r26, 0xFE	; 254
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 30       	cpi	r26, 0x08	; 8
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 04 02 	call	0x408	; 0x408 <main>
  8a:	0c 94 18 06 	jmp	0xc30	; 0xc30 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initADC>:
#include <avr/io.h>
int data;

void initADC() {

	ADMUX = (1 << REFS0);
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
}
  9a:	08 95       	ret

0000009c <getData>:

int getData() {

	int adcData = 0;
	int port = 3;
	while(ADCSRA & 1 << ADSC);
  9c:	36 99       	sbic	0x06, 6	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <getData>
	port &= 0x07;
	ADMUX = (ADMUX & ~(0x07)) | port;
  a0:	87 b1       	in	r24, 0x07	; 7
  a2:	88 7f       	andi	r24, 0xF8	; 248
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <getData+0xe>
	adcData = ADC;
  ae:	24 b1       	in	r18, 0x04	; 4
  b0:	35 b1       	in	r19, 0x05	; 5
	return adcData;

  b2:	82 2f       	mov	r24, r18
  b4:	93 2f       	mov	r25, r19
  b6:	08 95       	ret

000000b8 <initButtonOne>:
 */ 
#include "button.h"


void initButtonOne() {
	DDRC &= ~(1 << PORTC0) ;
  b8:	a0 98       	cbi	0x14, 0	; 20
}
  ba:	08 95       	ret

000000bc <initButtonTwo>:

void initButtonTwo() {
	DDRC &= ~(1 << PORTC1) ;
  bc:	a1 98       	cbi	0x14, 1	; 20
}
  be:	08 95       	ret

000000c0 <isButtonOnePressed>:

int isButtonOnePressed() {
	return PINC & (1<<PORTC0);
  c0:	23 b3       	in	r18, 0x13	; 19
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	21 70       	andi	r18, 0x01	; 1
  c6:	30 70       	andi	r19, 0x00	; 0
}
  c8:	82 2f       	mov	r24, r18
  ca:	93 2f       	mov	r25, r19
  cc:	08 95       	ret

000000ce <isButtonTwoPressed>:

int isButtonTwoPressed() {
	return PINC & (1<<PORTC1);
  ce:	23 b3       	in	r18, 0x13	; 19
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	22 70       	andi	r18, 0x02	; 2
  d4:	30 70       	andi	r19, 0x00	; 0
}
  d6:	82 2f       	mov	r24, r18
  d8:	93 2f       	mov	r25, r19
  da:	08 95       	ret

000000dc <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  dc:	87 b3       	in	r24, 0x17	; 23
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
  e2:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
  e4:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCDBusyLoop+0xc>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCDBusyLoop+0xe>

	
	do
	{

		SET_E();
  ea:	c4 9a       	sbi	0x18, 4	; 24
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCDBusyLoop+0x12>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  f0:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
  f2:	82 95       	swap	r24
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCDBusyLoop+0x1c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCDBusyLoop+0x1e>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  fa:	c4 98       	cbi	0x18, 4	; 24
  fc:	92 e0       	ldi	r25, 0x02	; 2
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <LCDBusyLoop+0x22>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
 104:	c4 9a       	sbi	0x18, 4	; 24
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCDBusyLoop+0x2c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCDBusyLoop+0x2e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 10a:	96 b3       	in	r25, 0x16	; 22
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCDBusyLoop+0x32>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCDBusyLoop+0x34>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 110:	c4 98       	cbi	0x18, 4	; 24
 112:	92 e0       	ldi	r25, 0x02	; 2
 114:	9a 95       	dec	r25
 116:	f1 f7       	brne	.-4      	; 0x114 <LCDBusyLoop+0x38>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
	}while(busy);
 11a:	88 23       	and	r24, r24
 11c:	34 f3       	brlt	.-52     	; 0xea <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
 11e:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 120:	87 b3       	in	r24, 0x17	; 23
 122:	8f 60       	ori	r24, 0x0F	; 15
 124:	87 bb       	out	0x17, r24	; 23

}
 126:	08 95       	ret

00000128 <LCDByte>:
	//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS COMPLETED PROCESSING THE COMMAND

	uint8_t hn,ln;			//Nibbles
	uint8_t temp;

	hn=c>>4;
 128:	28 2f       	mov	r18, r24
 12a:	22 95       	swap	r18
 12c:	2f 70       	andi	r18, 0x0F	; 15
	ln=(c & 0x0F);
 12e:	8f 70       	andi	r24, 0x0F	; 15

	if(isdata==0)
 130:	66 23       	and	r22, r22
 132:	11 f4       	brne	.+4      	; 0x138 <LCDByte+0x10>
		CLEAR_RS();
 134:	93 98       	cbi	0x12, 3	; 18
 136:	01 c0       	rjmp	.+2      	; 0x13a <LCDByte+0x12>
	else
		SET_RS();
 138:	93 9a       	sbi	0x12, 3	; 18
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCDByte+0x14>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDByte+0x16>

	_delay_us(0.500);		//tAS

	SET_E();
 13e:	c4 9a       	sbi	0x18, 4	; 24

	//Send high nibble

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 140:	98 b3       	in	r25, 0x18	; 24
 142:	90 7f       	andi	r25, 0xF0	; 240
 144:	92 2b       	or	r25, r18
	LCD_DATA_PORT=temp;
 146:	98 bb       	out	0x18, r25	; 24
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	9a 95       	dec	r25
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCDByte+0x22>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDByte+0x28>

	_delay_us(1);			//tEH

	//Now data lines are stable pull E low for transmission

	CLEAR_E();
 150:	c4 98       	cbi	0x18, 4	; 24
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDByte+0x2c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCDByte+0x32>

	_delay_us(1);

	//Send the lower nibble
	SET_E();
 15a:	c4 9a       	sbi	0x18, 4	; 24

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 15c:	98 b3       	in	r25, 0x18	; 24
 15e:	90 7f       	andi	r25, 0xF0	; 240
 160:	89 2b       	or	r24, r25

	LCD_DATA_PORT=temp;
 162:	88 bb       	out	0x18, r24	; 24
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <LCDByte+0x3e>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCDByte+0x44>

	_delay_us(1);			//tEH

	//SEND

	CLEAR_E();
 16c:	c4 98       	cbi	0x18, 4	; 24
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDByte+0x48>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCDByte+0x4e>

	_delay_us(1);			//tEL

	LCDBusyLoop();
 176:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDBusyLoop>
}
 17a:	08 95       	ret

0000017c <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	08 2f       	mov	r16, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	90 e7       	ldi	r25, 0x70	; 112
 18a:	a2 e0       	ldi	r26, 0x02	; 2
 18c:	81 50       	subi	r24, 0x01	; 1
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	a0 40       	sbci	r26, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <LCDInit+0x10>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCDInit+0x1a>
 196:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(100);
	
	//Clear Ports
	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	80 7f       	andi	r24, 0xF0	; 240
 19c:	88 bb       	out	0x18, r24	; 24
	
	CLEAR_E();
 19e:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 1a0:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 1a2:	93 98       	cbi	0x12, 3	; 18
	
	//Set IO Ports direction
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);	//data line direction
 1a4:	87 b3       	in	r24, 0x17	; 23
 1a6:	8f 60       	ori	r24, 0x0F	; 15
 1a8:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);			//E line line direction
 1aa:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);		//RS line direction
 1ac:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);		//RW line direction
 1ae:	8e 9a       	sbi	0x11, 6	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCDInit+0x36>
 1b2:	00 00       	nop
	//Reset sequence END
	
	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 1b4:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1b6:	c1 9a       	sbi	0x18, 1	; 24
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	9a 95       	dec	r25
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCDInit+0x3e>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCDInit+0x44>
	_delay_us(1);
	CLEAR_E();
 1c0:	c4 98       	cbi	0x18, 4	; 24
 1c2:	a2 e0       	ldi	r26, 0x02	; 2
 1c4:	aa 95       	dec	r26
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCDInit+0x48>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCDInit+0x4e>
 1ca:	87 e5       	ldi	r24, 0x57	; 87
 1cc:	92 e0       	ldi	r25, 0x02	; 2
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCDInit+0x52>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCDInit+0x58>
 1d4:	00 00       	nop
	//LCDBusyLoop();                                    //[B] Forgot this delay
	_delay_us(300);

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1d6:	88 e2       	ldi	r24, 0x28	; 40
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
	LCDCmd(0b00001000|style);	//Display Off
 1de:	80 2f       	mov	r24, r16
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
	LCDCmd(0b00001100|style);	//Display On
 1e8:	80 2f       	mov	r24, r16
 1ea:	8c 60       	ori	r24, 0x0C	; 12
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 1f2:	80 e4       	ldi	r24, 0x40	; 64
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
 1fa:	c0 e6       	ldi	r28, 0x60	; 96
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
 1fe:	00 ea       	ldi	r16, 0xA0	; 160
 200:	10 e0       	ldi	r17, 0x00	; 0
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 202:	89 91       	ld	r24, Y+
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 20a:	c0 17       	cp	r28, r16
 20c:	d1 07       	cpc	r29, r17
 20e:	c9 f7       	brne	.-14     	; 0x202 <LCDInit+0x86>
		LCDData(__cgram[__i]);
	
	LCDClear();
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>

}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	08 95       	ret

00000222 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 228:	88 81       	ld	r24, Y
 22a:	88 23       	and	r24, r24
 22c:	d9 f0       	breq	.+54     	; 0x264 <LCDWriteString+0x42>
 {
 	//Custom Char Support
	if(*msg=='%')
 22e:	85 32       	cpi	r24, 0x25	; 37
 230:	91 f4       	brne	.+36     	; 0x256 <LCDWriteString+0x34>
	{
		msg++;
 232:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 234:	88 81       	ld	r24, Y
 236:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 238:	88 30       	cpi	r24, 0x08	; 8
 23a:	20 f4       	brcc	.+8      	; 0x244 <LCDWriteString+0x22>
		{
			LCDData(cc);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
 242:	0c c0       	rjmp	.+24     	; 0x25c <LCDWriteString+0x3a>
		}
		else
		{
			LCDData('%');
 244:	85 e2       	ldi	r24, 0x25	; 37
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
			LCDData(*msg);
 24c:	88 81       	ld	r24, Y
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
 254:	03 c0       	rjmp	.+6      	; 0x25c <LCDWriteString+0x3a>
		}
	}
	else
	{
		LCDData(*msg);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
	}
	msg++;
 25c:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 25e:	88 81       	ld	r24, Y
 260:	88 23       	and	r24, r24
 262:	29 f7       	brne	.-54     	; 0x22e <LCDWriteString+0xc>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <LCDWriteFString>:

void LCDWriteFString(const char *msg)
{
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 272:	fc 01       	movw	r30, r24
 274:	84 91       	lpm	r24, Z+
 while(ch!='\0')
 276:	88 23       	and	r24, r24
 278:	f1 f0       	breq	.+60     	; 0x2b6 <LCDWriteFString+0x4c>
 {
 	//Custom Char Support
	if(ch=='%')
 27a:	85 32       	cpi	r24, 0x25	; 37
 27c:	a1 f4       	brne	.+40     	; 0x2a6 <LCDWriteFString+0x3c>
	{
		msg++;
 27e:	21 96       	adiw	r28, 0x01	; 1
		
		ch=pgm_read_byte(msg);
 280:	fe 01       	movw	r30, r28
 282:	14 91       	lpm	r17, Z+
		
		int8_t cc=ch-'0';
 284:	81 2f       	mov	r24, r17
 286:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 288:	88 30       	cpi	r24, 0x08	; 8
 28a:	20 f4       	brcc	.+8      	; 0x294 <LCDWriteFString+0x2a>
		{
			LCDData(cc);
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
 292:	0c c0       	rjmp	.+24     	; 0x2ac <LCDWriteFString+0x42>
		}
		else
		{
			LCDData('%');
 294:	85 e2       	ldi	r24, 0x25	; 37
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
			LCDData(ch);
 29c:	81 2f       	mov	r24, r17
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <LCDWriteFString+0x42>
		}
	}
	else
	{
		LCDData(ch);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
	}
	msg++;
 2ac:	21 96       	adiw	r28, 0x01	; 1
	ch=pgm_read_byte(msg);
 2ae:	fe 01       	movw	r30, r28
 2b0:	84 91       	lpm	r24, Z+


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 while(ch!='\0')
 2b2:	88 23       	and	r24, r24
 2b4:	11 f7       	brne	.-60     	; 0x27a <LCDWriteFString+0x10>
		LCDData(ch);
	}
	msg++;
	ch=pgm_read_byte(msg);
 }
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	08 95       	ret

000002be <LCDWriteInt>:

void LCDWriteInt(int val,int8_t field_length)
{
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	df 93       	push	r29
 2c8:	cf 93       	push	r28
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <LCDWriteInt+0xe>
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <LCDWriteInt+0x10>
 2ce:	0f 92       	push	r0
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	8c 01       	movw	r16, r24
 2d6:	e6 2e       	mov	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2d8:	fe 01       	movw	r30, r28
 2da:	31 96       	adiw	r30, 0x01	; 1
 2dc:	85 e0       	ldi	r24, 0x05	; 5
 2de:	df 01       	movw	r26, r30
 2e0:	1d 92       	st	X+, r1
 2e2:	8a 95       	dec	r24
 2e4:	e9 f7       	brne	.-6      	; 0x2e0 <LCDWriteInt+0x22>
	int i=4,j=0;
	
	//Handle negative integers
	if(val<0)
 2e6:	11 23       	and	r17, r17
 2e8:	44 f4       	brge	.+16     	; 0x2fa <LCDWriteInt+0x3c>
	{
		LCDData('-');   //Write Negative sign
 2ea:	8d e2       	ldi	r24, 0x2D	; 45
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
		val=val*-1;     //convert to positive
 2f2:	10 95       	com	r17
 2f4:	01 95       	neg	r16
 2f6:	1f 4f       	sbci	r17, 0xFF	; 255
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <LCDWriteInt+0x44>
	}
	else
	{
		LCDData(' ');
 2fa:	80 e2       	ldi	r24, 0x20	; 32
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
	}
	
	while(val)
 302:	01 15       	cp	r16, r1
 304:	11 05       	cpc	r17, r1
 306:	71 f0       	breq	.+28     	; 0x324 <LCDWriteInt+0x66>
 308:	fe 01       	movw	r30, r28
 30a:	36 96       	adiw	r30, 0x06	; 6
	{
		str[i]=val%10;
 30c:	2a e0       	ldi	r18, 0x0A	; 10
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	c8 01       	movw	r24, r16
 312:	b9 01       	movw	r22, r18
 314:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divmodhi4>
 318:	82 93       	st	-Z, r24
		val=val/10;
 31a:	06 2f       	mov	r16, r22
 31c:	17 2f       	mov	r17, r23
	else
	{
		LCDData(' ');
	}
	
	while(val)
 31e:	01 15       	cp	r16, r1
 320:	11 05       	cpc	r17, r1
 322:	b1 f7       	brne	.-20     	; 0x310 <LCDWriteInt+0x52>
		str[i]=val%10;
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
 324:	be 2d       	mov	r27, r14
 326:	bf 3f       	cpi	r27, 0xFF	; 255
 328:	b1 f4       	brne	.+44     	; 0x356 <LCDWriteInt+0x98>
		while(str[j]==0) j++;
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	88 23       	and	r24, r24
 32e:	49 f0       	breq	.+18     	; 0x342 <LCDWriteInt+0x84>
 330:	00 e0       	ldi	r16, 0x00	; 0
 332:	10 e0       	ldi	r17, 0x00	; 0
	msg++;
	ch=pgm_read_byte(msg);
 }
}

void LCDWriteInt(int val,int8_t field_length)
 334:	7e 01       	movw	r14, r28
 336:	08 94       	sec
 338:	e1 1c       	adc	r14, r1
 33a:	f1 1c       	adc	r15, r1
 33c:	e0 0e       	add	r14, r16
 33e:	f1 1e       	adc	r15, r17
 340:	15 c0       	rjmp	.+42     	; 0x36c <LCDWriteInt+0xae>
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
		while(str[j]==0) j++;
 342:	fe 01       	movw	r30, r28
 344:	32 96       	adiw	r30, 0x02	; 2
 346:	00 e0       	ldi	r16, 0x00	; 0
 348:	10 e0       	ldi	r17, 0x00	; 0
 34a:	0f 5f       	subi	r16, 0xFF	; 255
 34c:	1f 4f       	sbci	r17, 0xFF	; 255
 34e:	81 91       	ld	r24, Z+
 350:	88 23       	and	r24, r24
 352:	d9 f3       	breq	.-10     	; 0x34a <LCDWriteInt+0x8c>
 354:	07 c0       	rjmp	.+14     	; 0x364 <LCDWriteInt+0xa6>
	else
		j=5-field_length;
 356:	ff 24       	eor	r15, r15
 358:	e7 fc       	sbrc	r14, 7
 35a:	f0 94       	com	r15
 35c:	05 e0       	ldi	r16, 0x05	; 5
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	0e 19       	sub	r16, r14
 362:	1f 09       	sbc	r17, r15

	for(i=j;i<5;i++)
 364:	05 30       	cpi	r16, 0x05	; 5
 366:	11 05       	cpc	r17, r1
 368:	2c f3       	brlt	.-54     	; 0x334 <LCDWriteInt+0x76>
 36a:	0c c0       	rjmp	.+24     	; 0x384 <LCDWriteInt+0xc6>
	{
		LCDData('0'+str[i]);
 36c:	f7 01       	movw	r30, r14
 36e:	81 91       	ld	r24, Z+
 370:	7f 01       	movw	r14, r30
 372:	80 5d       	subi	r24, 0xD0	; 208
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
 37a:	0f 5f       	subi	r16, 0xFF	; 255
 37c:	1f 4f       	sbci	r17, 0xFF	; 255
 37e:	05 30       	cpi	r16, 0x05	; 5
 380:	11 05       	cpc	r17, r1
 382:	a4 f3       	brlt	.-24     	; 0x36c <LCDWriteInt+0xae>
	{
		LCDData('0'+str[i]);
	}
}
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	cf 91       	pop	r28
 390:	df 91       	pop	r29
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	ef 90       	pop	r14
 39a:	08 95       	ret

0000039c <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 39c:	84 31       	cpi	r24, 0x14	; 20
 39e:	78 f4       	brcc	.+30     	; 0x3be <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 3a0:	62 30       	cpi	r22, 0x02	; 2
 3a2:	31 f0       	breq	.+12     	; 0x3b0 <LCDGotoXY+0x14>
 3a4:	63 30       	cpi	r22, 0x03	; 3
 3a6:	31 f0       	breq	.+12     	; 0x3b4 <LCDGotoXY+0x18>
 3a8:	61 30       	cpi	r22, 0x01	; 1
 3aa:	29 f4       	brne	.+10     	; 0x3b6 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 3ac:	80 64       	ori	r24, 0x40	; 64
			break;
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 3b0:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 3b4:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 3b6:	80 68       	ori	r24, 0x80	; 128
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
 3be:	08 95       	ret

000003c0 <initLM>:

int temp = 0;


void initLM() {
	initADC();
 3c0:	0e 94 49 00 	call	0x92	; 0x92 <initADC>
	
}
 3c4:	08 95       	ret

000003c6 <getTemp>:

int getTemp() { 
	temp = (382 - getData()) / 3;
 3c6:	0e 94 4e 00 	call	0x9c	; 0x9c <getData>
 3ca:	2e e7       	ldi	r18, 0x7E	; 126
 3cc:	31 e0       	ldi	r19, 0x01	; 1
 3ce:	a9 01       	movw	r20, r18
 3d0:	48 1b       	sub	r20, r24
 3d2:	59 0b       	sbc	r21, r25
 3d4:	ca 01       	movw	r24, r20
 3d6:	63 e0       	ldi	r22, 0x03	; 3
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divmodhi4>
 3de:	60 93 fe 00 	sts	0x00FE, r22
 3e2:	70 93 ff 00 	sts	0x00FF, r23
	return temp;
}	
 3e6:	86 2f       	mov	r24, r22
 3e8:	97 2f       	mov	r25, r23
 3ea:	08 95       	ret

000003ec <convertCelsiusToKelvin>:

int convertCelsiusToKelvin(int temp) {
	return temp + 273;
 3ec:	9c 01       	movw	r18, r24
 3ee:	2f 5e       	subi	r18, 0xEF	; 239
 3f0:	3e 4f       	sbci	r19, 0xFE	; 254
}
 3f2:	82 2f       	mov	r24, r18
 3f4:	93 2f       	mov	r25, r19
 3f6:	08 95       	ret

000003f8 <convertCelsiusToFahrenheit>:

int convertCelsiusToFahrenheit(int temp) {
	return temp * 2 + 32;
 3f8:	9c 01       	movw	r18, r24
 3fa:	20 5f       	subi	r18, 0xF0	; 240
 3fc:	3f 4f       	sbci	r19, 0xFF	; 255
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	82 2f       	mov	r24, r18
 404:	93 2f       	mov	r25, r19
 406:	08 95       	ret

00000408 <main>:
#include "lcd.h"
#include <avr/delay.h>



int main(void) {
 408:	8f 92       	push	r8
 40a:	9f 92       	push	r9
 40c:	af 92       	push	r10
 40e:	bf 92       	push	r11
 410:	cf 92       	push	r12
 412:	df 92       	push	r13
 414:	ef 92       	push	r14
 416:	ff 92       	push	r15
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
	
	initButtonOne();
 420:	0e 94 5c 00 	call	0xb8	; 0xb8 <initButtonOne>
	initButtonTwo();
 424:	0e 94 5e 00 	call	0xbc	; 0xbc <initButtonTwo>
	initLM();
 428:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <initLM>
	uart_stdio_Init();
 42c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <uart_stdio_Init>
	
	//Initialize LCD module
   LCDInit(LS_BLINK|LS_ULINE);
 430:	83 e0       	ldi	r24, 0x03	; 3
 432:	0e 94 be 00 	call	0x17c	; 0x17c <LCDInit>

   //Clear the screen
   LCDClear();
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
				LCDWriteString("Fahrenheit:");
				LCDWriteIntXY(1, 1, convertCelsiusToFahrenheit(getTemp()),3);
				printf("Fahrenheit: %d\n", convertCelsiusToFahrenheit(getTemp()));
			}else {
				LCDClear();
				LCDWriteString("Kelvin:");
 43e:	0f 2e       	mov	r0, r31
 440:	fc eb       	ldi	r31, 0xBC	; 188
 442:	ef 2e       	mov	r14, r31
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	ff 2e       	mov	r15, r31
 448:	f0 2d       	mov	r31, r0
				LCDWriteIntXY(1, 1, convertCelsiusToKelvin(getTemp()),3);
				printf("Kelvin: %d\n", convertCelsiusToKelvin(getTemp()));
 44a:	0f 2e       	mov	r0, r31
 44c:	f4 ec       	ldi	r31, 0xC4	; 196
 44e:	cf 2e       	mov	r12, r31
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	df 2e       	mov	r13, r31
 454:	f0 2d       	mov	r31, r0
		_delay_ms(1000);
		
		if(isButtonOnePressed()) {
			if(isButtonTwoPressed()) {
				LCDClear();
				LCDWriteString("Fahrenheit:");
 456:	0f 2e       	mov	r0, r31
 458:	f0 ea       	ldi	r31, 0xA0	; 160
 45a:	af 2e       	mov	r10, r31
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	bf 2e       	mov	r11, r31
 460:	f0 2d       	mov	r31, r0
				LCDWriteIntXY(1, 1, convertCelsiusToFahrenheit(getTemp()),3);
				printf("Fahrenheit: %d\n", convertCelsiusToFahrenheit(getTemp()));
 462:	0f 2e       	mov	r0, r31
 464:	fc ea       	ldi	r31, 0xAC	; 172
 466:	8f 2e       	mov	r8, r31
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	9f 2e       	mov	r9, r31
 46c:	f0 2d       	mov	r31, r0
				printf("Kelvin: %d\n", convertCelsiusToKelvin(getTemp()));
			}			
			
		} else {
			LCDClear();
			LCDWriteString("Celsius:");
 46e:	c0 ed       	ldi	r28, 0xD0	; 208
 470:	d0 e0       	ldi	r29, 0x00	; 0
			LCDWriteIntXY(1, 1, getTemp(),3);
			printf("Celsius : %d\n", getTemp());
 472:	09 ed       	ldi	r16, 0xD9	; 217
 474:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	99 e6       	ldi	r25, 0x69	; 105
 47a:	a8 e1       	ldi	r26, 0x18	; 24
 47c:	81 50       	subi	r24, 0x01	; 1
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	a0 40       	sbci	r26, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <main+0x74>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0x7e>
 486:	00 00       	nop

	
    while(1) {
		_delay_ms(1000);
		
		if(isButtonOnePressed()) {
 488:	0e 94 60 00 	call	0xc0	; 0xc0 <isButtonOnePressed>
 48c:	00 97       	sbiw	r24, 0x00	; 0
 48e:	09 f4       	brne	.+2      	; 0x492 <main+0x8a>
 490:	52 c0       	rjmp	.+164    	; 0x536 <main+0x12e>
			if(isButtonTwoPressed()) {
 492:	0e 94 67 00 	call	0xce	; 0xce <isButtonTwoPressed>
 496:	00 97       	sbiw	r24, 0x00	; 0
 498:	49 f1       	breq	.+82     	; 0x4ec <main+0xe4>
				LCDClear();
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
				LCDWriteString("Fahrenheit:");
 4a2:	c5 01       	movw	r24, r10
 4a4:	0e 94 11 01 	call	0x222	; 0x222 <LCDWriteString>
				LCDWriteIntXY(1, 1, convertCelsiusToFahrenheit(getTemp()),3);
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	0e 94 ce 01 	call	0x39c	; 0x39c <LCDGotoXY>
 4b0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <getTemp>
 4b4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <convertCelsiusToFahrenheit>
 4b8:	63 e0       	ldi	r22, 0x03	; 3
 4ba:	0e 94 5f 01 	call	0x2be	; 0x2be <LCDWriteInt>
				printf("Fahrenheit: %d\n", convertCelsiusToFahrenheit(getTemp()));
 4be:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <getTemp>
 4c2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <convertCelsiusToFahrenheit>
 4c6:	00 d0       	rcall	.+0      	; 0x4c8 <main+0xc0>
 4c8:	00 d0       	rcall	.+0      	; 0x4ca <main+0xc2>
 4ca:	ad b7       	in	r26, 0x3d	; 61
 4cc:	be b7       	in	r27, 0x3e	; 62
 4ce:	12 96       	adiw	r26, 0x02	; 2
 4d0:	9c 92       	st	X, r9
 4d2:	8e 92       	st	-X, r8
 4d4:	11 97       	sbiw	r26, 0x01	; 1
 4d6:	14 96       	adiw	r26, 0x04	; 4
 4d8:	9c 93       	st	X, r25
 4da:	8e 93       	st	-X, r24
 4dc:	13 97       	sbiw	r26, 0x03	; 3
 4de:	0e 94 45 03 	call	0x68a	; 0x68a <printf>
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	c5 cf       	rjmp	.-118    	; 0x476 <main+0x6e>
			}else {
				LCDClear();
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
				LCDWriteString("Kelvin:");
 4f4:	c7 01       	movw	r24, r14
 4f6:	0e 94 11 01 	call	0x222	; 0x222 <LCDWriteString>
				LCDWriteIntXY(1, 1, convertCelsiusToKelvin(getTemp()),3);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	61 e0       	ldi	r22, 0x01	; 1
 4fe:	0e 94 ce 01 	call	0x39c	; 0x39c <LCDGotoXY>
 502:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <getTemp>
 506:	0e 94 f6 01 	call	0x3ec	; 0x3ec <convertCelsiusToKelvin>
 50a:	63 e0       	ldi	r22, 0x03	; 3
 50c:	0e 94 5f 01 	call	0x2be	; 0x2be <LCDWriteInt>
				printf("Kelvin: %d\n", convertCelsiusToKelvin(getTemp()));
 510:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <getTemp>
 514:	0e 94 f6 01 	call	0x3ec	; 0x3ec <convertCelsiusToKelvin>
 518:	00 d0       	rcall	.+0      	; 0x51a <main+0x112>
 51a:	00 d0       	rcall	.+0      	; 0x51c <main+0x114>
 51c:	ed b7       	in	r30, 0x3d	; 61
 51e:	fe b7       	in	r31, 0x3e	; 62
 520:	d2 82       	std	Z+2, r13	; 0x02
 522:	c1 82       	std	Z+1, r12	; 0x01
 524:	94 83       	std	Z+4, r25	; 0x04
 526:	83 83       	std	Z+3, r24	; 0x03
 528:	0e 94 45 03 	call	0x68a	; 0x68a <printf>
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	a0 cf       	rjmp	.-192    	; 0x476 <main+0x6e>
			}			
			
		} else {
			LCDClear();
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
			LCDWriteString("Celsius:");
 53e:	ce 01       	movw	r24, r28
 540:	0e 94 11 01 	call	0x222	; 0x222 <LCDWriteString>
			LCDWriteIntXY(1, 1, getTemp(),3);
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	0e 94 ce 01 	call	0x39c	; 0x39c <LCDGotoXY>
 54c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <getTemp>
 550:	63 e0       	ldi	r22, 0x03	; 3
 552:	0e 94 5f 01 	call	0x2be	; 0x2be <LCDWriteInt>
			printf("Celsius : %d\n", getTemp());
 556:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <getTemp>
 55a:	00 d0       	rcall	.+0      	; 0x55c <main+0x154>
 55c:	00 d0       	rcall	.+0      	; 0x55e <main+0x156>
 55e:	ad b7       	in	r26, 0x3d	; 61
 560:	be b7       	in	r27, 0x3e	; 62
 562:	12 96       	adiw	r26, 0x02	; 2
 564:	1c 93       	st	X, r17
 566:	0e 93       	st	-X, r16
 568:	11 97       	sbiw	r26, 0x01	; 1
 56a:	14 96       	adiw	r26, 0x04	; 4
 56c:	9c 93       	st	X, r25
 56e:	8e 93       	st	-X, r24
 570:	13 97       	sbiw	r26, 0x03	; 3
 572:	0e 94 45 03 	call	0x68a	; 0x68a <printf>
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	7b cf       	rjmp	.-266    	; 0x476 <main+0x6e>

00000580 <uart_stdio_PutChar>:
#include "uart_stdio.h"
#define UART_BAUD 9600

FILE uart_output = FDEV_SETUP_STREAM(uart_stdio_PutChar, NULL, _FDEV_SETUP_WRITE);

int uart_stdio_PutChar(char c, FILE *stream) {
 580:	1f 93       	push	r17
 582:	18 2f       	mov	r17, r24

  if (c == '\a') {
 584:	87 30       	cpi	r24, 0x07	; 7
 586:	69 f4       	brne	.+26     	; 0x5a2 <uart_stdio_PutChar+0x22>
      fputs("*ring*\n", stderr);
 588:	20 91 06 01 	lds	r18, 0x0106
 58c:	30 91 07 01 	lds	r19, 0x0107
 590:	87 ee       	ldi	r24, 0xE7	; 231
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	47 e0       	ldi	r20, 0x07	; 7
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	0e 94 0f 03 	call	0x61e	; 0x61e <fwrite>
      return 0;
 5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <uart_stdio_PutChar+0x32>
    }

  if (c == '\n')
 5a2:	8a 30       	cpi	r24, 0x0A	; 10
 5a4:	19 f4       	brne	.+6      	; 0x5ac <uart_stdio_PutChar+0x2c>
    uart_stdio_PutChar('\r', stream);
 5a6:	8d e0       	ldi	r24, 0x0D	; 13
 5a8:	0e 94 c0 02 	call	0x580	; 0x580 <uart_stdio_PutChar>
  while(~UCSRA & (1 << UDRE));
 5ac:	5d 9b       	sbis	0x0b, 5	; 11
 5ae:	fe cf       	rjmp	.-4      	; 0x5ac <uart_stdio_PutChar+0x2c>
  UDR = c;
 5b0:	1c b9       	out	0x0c, r17	; 12

  return 0;
}
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	1f 91       	pop	r17
 5b8:	08 95       	ret

000005ba <uart_stdio_Init>:
void uart_stdio_Init(void) {
	#if F_CPU < 2000000UL && defined(U2X)
	  UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
	  UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
	#else
	  UBRRL = (F_CPU / (16UL * UART_BAUD)) - 1;
 5ba:	83 e3       	ldi	r24, 0x33	; 51
 5bc:	89 b9       	out	0x09, r24	; 9
	#endif
	  UCSRB = _BV(TXEN) | _BV(RXEN); /* tx/rx enable */
 5be:	88 e1       	ldi	r24, 0x18	; 24
 5c0:	8a b9       	out	0x0a, r24	; 10

	  stdout = &uart_output;
 5c2:	8f ee       	ldi	r24, 0xEF	; 239
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	90 93 05 01 	sts	0x0105, r25
 5ca:	80 93 04 01 	sts	0x0104, r24
}
 5ce:	08 95       	ret

000005d0 <__divmodhi4>:
 5d0:	97 fb       	bst	r25, 7
 5d2:	09 2e       	mov	r0, r25
 5d4:	07 26       	eor	r0, r23
 5d6:	0a d0       	rcall	.+20     	; 0x5ec <__divmodhi4_neg1>
 5d8:	77 fd       	sbrc	r23, 7
 5da:	04 d0       	rcall	.+8      	; 0x5e4 <__divmodhi4_neg2>
 5dc:	0c d0       	rcall	.+24     	; 0x5f6 <__udivmodhi4>
 5de:	06 d0       	rcall	.+12     	; 0x5ec <__divmodhi4_neg1>
 5e0:	00 20       	and	r0, r0
 5e2:	1a f4       	brpl	.+6      	; 0x5ea <__divmodhi4_exit>

000005e4 <__divmodhi4_neg2>:
 5e4:	70 95       	com	r23
 5e6:	61 95       	neg	r22
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255

000005ea <__divmodhi4_exit>:
 5ea:	08 95       	ret

000005ec <__divmodhi4_neg1>:
 5ec:	f6 f7       	brtc	.-4      	; 0x5ea <__divmodhi4_exit>
 5ee:	90 95       	com	r25
 5f0:	81 95       	neg	r24
 5f2:	9f 4f       	sbci	r25, 0xFF	; 255
 5f4:	08 95       	ret

000005f6 <__udivmodhi4>:
 5f6:	aa 1b       	sub	r26, r26
 5f8:	bb 1b       	sub	r27, r27
 5fa:	51 e1       	ldi	r21, 0x11	; 17
 5fc:	07 c0       	rjmp	.+14     	; 0x60c <__udivmodhi4_ep>

000005fe <__udivmodhi4_loop>:
 5fe:	aa 1f       	adc	r26, r26
 600:	bb 1f       	adc	r27, r27
 602:	a6 17       	cp	r26, r22
 604:	b7 07       	cpc	r27, r23
 606:	10 f0       	brcs	.+4      	; 0x60c <__udivmodhi4_ep>
 608:	a6 1b       	sub	r26, r22
 60a:	b7 0b       	sbc	r27, r23

0000060c <__udivmodhi4_ep>:
 60c:	88 1f       	adc	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	5a 95       	dec	r21
 612:	a9 f7       	brne	.-22     	; 0x5fe <__udivmodhi4_loop>
 614:	80 95       	com	r24
 616:	90 95       	com	r25
 618:	bc 01       	movw	r22, r24
 61a:	cd 01       	movw	r24, r26
 61c:	08 95       	ret

0000061e <fwrite>:
 61e:	a0 e0       	ldi	r26, 0x00	; 0
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e5 e1       	ldi	r30, 0x15	; 21
 624:	f3 e0       	ldi	r31, 0x03	; 3
 626:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__prologue_saves__+0xc>
 62a:	4b 01       	movw	r8, r22
 62c:	5a 01       	movw	r10, r20
 62e:	69 01       	movw	r12, r18
 630:	d9 01       	movw	r26, r18
 632:	13 96       	adiw	r26, 0x03	; 3
 634:	2c 91       	ld	r18, X
 636:	13 97       	sbiw	r26, 0x03	; 3
 638:	21 ff       	sbrs	r18, 1
 63a:	1f c0       	rjmp	.+62     	; 0x67a <fwrite+0x5c>
 63c:	c0 e0       	ldi	r28, 0x00	; 0
 63e:	d0 e0       	ldi	r29, 0x00	; 0
 640:	14 c0       	rjmp	.+40     	; 0x66a <fwrite+0x4c>
 642:	d6 01       	movw	r26, r12
 644:	18 96       	adiw	r26, 0x08	; 8
 646:	ed 91       	ld	r30, X+
 648:	fc 91       	ld	r31, X
 64a:	19 97       	sbiw	r26, 0x09	; 9
 64c:	d8 01       	movw	r26, r16
 64e:	8d 91       	ld	r24, X+
 650:	8d 01       	movw	r16, r26
 652:	b6 01       	movw	r22, r12
 654:	09 95       	icall
 656:	00 97       	sbiw	r24, 0x00	; 0
 658:	91 f4       	brne	.+36     	; 0x67e <fwrite+0x60>
 65a:	08 94       	sec
 65c:	e1 1c       	adc	r14, r1
 65e:	f1 1c       	adc	r15, r1
 660:	c8 01       	movw	r24, r16
 662:	e8 14       	cp	r14, r8
 664:	f9 04       	cpc	r15, r9
 666:	68 f3       	brcs	.-38     	; 0x642 <fwrite+0x24>
 668:	21 96       	adiw	r28, 0x01	; 1
 66a:	ca 15       	cp	r28, r10
 66c:	db 05       	cpc	r29, r11
 66e:	38 f4       	brcc	.+14     	; 0x67e <fwrite+0x60>
 670:	08 2f       	mov	r16, r24
 672:	19 2f       	mov	r17, r25
 674:	ee 24       	eor	r14, r14
 676:	ff 24       	eor	r15, r15
 678:	f3 cf       	rjmp	.-26     	; 0x660 <fwrite+0x42>
 67a:	c0 e0       	ldi	r28, 0x00	; 0
 67c:	d0 e0       	ldi	r29, 0x00	; 0
 67e:	ce 01       	movw	r24, r28
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	ec e0       	ldi	r30, 0x0C	; 12
 686:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__epilogue_restores__+0xc>

0000068a <printf>:
 68a:	a0 e0       	ldi	r26, 0x00	; 0
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	eb e4       	ldi	r30, 0x4B	; 75
 690:	f3 e0       	ldi	r31, 0x03	; 3
 692:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__prologue_saves__+0x20>
 696:	fe 01       	movw	r30, r28
 698:	35 96       	adiw	r30, 0x05	; 5
 69a:	61 91       	ld	r22, Z+
 69c:	71 91       	ld	r23, Z+
 69e:	80 91 04 01 	lds	r24, 0x0104
 6a2:	90 91 05 01 	lds	r25, 0x0105
 6a6:	af 01       	movw	r20, r30
 6a8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <vfprintf>
 6ac:	20 96       	adiw	r28, 0x00	; 0
 6ae:	e2 e0       	ldi	r30, 0x02	; 2
 6b0:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__epilogue_restores__+0x20>

000006b4 <vfprintf>:
 6b4:	ac e0       	ldi	r26, 0x0C	; 12
 6b6:	b0 e0       	ldi	r27, 0x00	; 0
 6b8:	e0 e6       	ldi	r30, 0x60	; 96
 6ba:	f3 e0       	ldi	r31, 0x03	; 3
 6bc:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__prologue_saves__>
 6c0:	6c 01       	movw	r12, r24
 6c2:	1b 01       	movw	r2, r22
 6c4:	8a 01       	movw	r16, r20
 6c6:	fc 01       	movw	r30, r24
 6c8:	17 82       	std	Z+7, r1	; 0x07
 6ca:	16 82       	std	Z+6, r1	; 0x06
 6cc:	83 81       	ldd	r24, Z+3	; 0x03
 6ce:	81 ff       	sbrs	r24, 1
 6d0:	d1 c1       	rjmp	.+930    	; 0xa74 <__stack+0x215>
 6d2:	2e 01       	movw	r4, r28
 6d4:	08 94       	sec
 6d6:	41 1c       	adc	r4, r1
 6d8:	51 1c       	adc	r5, r1
 6da:	f6 01       	movw	r30, r12
 6dc:	93 81       	ldd	r25, Z+3	; 0x03
 6de:	f1 01       	movw	r30, r2
 6e0:	93 fd       	sbrc	r25, 3
 6e2:	85 91       	lpm	r24, Z+
 6e4:	93 ff       	sbrs	r25, 3
 6e6:	81 91       	ld	r24, Z+
 6e8:	1f 01       	movw	r2, r30
 6ea:	88 23       	and	r24, r24
 6ec:	09 f4       	brne	.+2      	; 0x6f0 <vfprintf+0x3c>
 6ee:	be c1       	rjmp	.+892    	; 0xa6c <__stack+0x20d>
 6f0:	85 32       	cpi	r24, 0x25	; 37
 6f2:	39 f4       	brne	.+14     	; 0x702 <vfprintf+0x4e>
 6f4:	93 fd       	sbrc	r25, 3
 6f6:	85 91       	lpm	r24, Z+
 6f8:	93 ff       	sbrs	r25, 3
 6fa:	81 91       	ld	r24, Z+
 6fc:	1f 01       	movw	r2, r30
 6fe:	85 32       	cpi	r24, 0x25	; 37
 700:	29 f4       	brne	.+10     	; 0x70c <vfprintf+0x58>
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	b6 01       	movw	r22, r12
 706:	0e 94 57 05 	call	0xaae	; 0xaae <fputc>
 70a:	e7 cf       	rjmp	.-50     	; 0x6da <vfprintf+0x26>
 70c:	ee 24       	eor	r14, r14
 70e:	ff 24       	eor	r15, r15
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	20 32       	cpi	r18, 0x20	; 32
 714:	b0 f4       	brcc	.+44     	; 0x742 <vfprintf+0x8e>
 716:	8b 32       	cpi	r24, 0x2B	; 43
 718:	69 f0       	breq	.+26     	; 0x734 <vfprintf+0x80>
 71a:	8c 32       	cpi	r24, 0x2C	; 44
 71c:	28 f4       	brcc	.+10     	; 0x728 <vfprintf+0x74>
 71e:	80 32       	cpi	r24, 0x20	; 32
 720:	51 f0       	breq	.+20     	; 0x736 <vfprintf+0x82>
 722:	83 32       	cpi	r24, 0x23	; 35
 724:	71 f4       	brne	.+28     	; 0x742 <vfprintf+0x8e>
 726:	0b c0       	rjmp	.+22     	; 0x73e <vfprintf+0x8a>
 728:	8d 32       	cpi	r24, 0x2D	; 45
 72a:	39 f0       	breq	.+14     	; 0x73a <vfprintf+0x86>
 72c:	80 33       	cpi	r24, 0x30	; 48
 72e:	49 f4       	brne	.+18     	; 0x742 <vfprintf+0x8e>
 730:	21 60       	ori	r18, 0x01	; 1
 732:	2c c0       	rjmp	.+88     	; 0x78c <vfprintf+0xd8>
 734:	22 60       	ori	r18, 0x02	; 2
 736:	24 60       	ori	r18, 0x04	; 4
 738:	29 c0       	rjmp	.+82     	; 0x78c <vfprintf+0xd8>
 73a:	28 60       	ori	r18, 0x08	; 8
 73c:	27 c0       	rjmp	.+78     	; 0x78c <vfprintf+0xd8>
 73e:	20 61       	ori	r18, 0x10	; 16
 740:	25 c0       	rjmp	.+74     	; 0x78c <vfprintf+0xd8>
 742:	27 fd       	sbrc	r18, 7
 744:	2c c0       	rjmp	.+88     	; 0x79e <vfprintf+0xea>
 746:	38 2f       	mov	r19, r24
 748:	30 53       	subi	r19, 0x30	; 48
 74a:	3a 30       	cpi	r19, 0x0A	; 10
 74c:	98 f4       	brcc	.+38     	; 0x774 <vfprintf+0xc0>
 74e:	26 ff       	sbrs	r18, 6
 750:	08 c0       	rjmp	.+16     	; 0x762 <vfprintf+0xae>
 752:	8e 2d       	mov	r24, r14
 754:	88 0f       	add	r24, r24
 756:	e8 2e       	mov	r14, r24
 758:	ee 0c       	add	r14, r14
 75a:	ee 0c       	add	r14, r14
 75c:	e8 0e       	add	r14, r24
 75e:	e3 0e       	add	r14, r19
 760:	15 c0       	rjmp	.+42     	; 0x78c <vfprintf+0xd8>
 762:	8f 2d       	mov	r24, r15
 764:	88 0f       	add	r24, r24
 766:	f8 2e       	mov	r15, r24
 768:	ff 0c       	add	r15, r15
 76a:	ff 0c       	add	r15, r15
 76c:	f8 0e       	add	r15, r24
 76e:	f3 0e       	add	r15, r19
 770:	20 62       	ori	r18, 0x20	; 32
 772:	0c c0       	rjmp	.+24     	; 0x78c <vfprintf+0xd8>
 774:	8e 32       	cpi	r24, 0x2E	; 46
 776:	21 f4       	brne	.+8      	; 0x780 <vfprintf+0xcc>
 778:	26 fd       	sbrc	r18, 6
 77a:	78 c1       	rjmp	.+752    	; 0xa6c <__stack+0x20d>
 77c:	20 64       	ori	r18, 0x40	; 64
 77e:	06 c0       	rjmp	.+12     	; 0x78c <vfprintf+0xd8>
 780:	8c 36       	cpi	r24, 0x6C	; 108
 782:	11 f4       	brne	.+4      	; 0x788 <vfprintf+0xd4>
 784:	20 68       	ori	r18, 0x80	; 128
 786:	02 c0       	rjmp	.+4      	; 0x78c <vfprintf+0xd8>
 788:	88 36       	cpi	r24, 0x68	; 104
 78a:	49 f4       	brne	.+18     	; 0x79e <vfprintf+0xea>
 78c:	f1 01       	movw	r30, r2
 78e:	93 fd       	sbrc	r25, 3
 790:	85 91       	lpm	r24, Z+
 792:	93 ff       	sbrs	r25, 3
 794:	81 91       	ld	r24, Z+
 796:	1f 01       	movw	r2, r30
 798:	88 23       	and	r24, r24
 79a:	09 f0       	breq	.+2      	; 0x79e <vfprintf+0xea>
 79c:	ba cf       	rjmp	.-140    	; 0x712 <vfprintf+0x5e>
 79e:	98 2f       	mov	r25, r24
 7a0:	95 54       	subi	r25, 0x45	; 69
 7a2:	93 30       	cpi	r25, 0x03	; 3
 7a4:	18 f0       	brcs	.+6      	; 0x7ac <vfprintf+0xf8>
 7a6:	90 52       	subi	r25, 0x20	; 32
 7a8:	93 30       	cpi	r25, 0x03	; 3
 7aa:	28 f4       	brcc	.+10     	; 0x7b6 <vfprintf+0x102>
 7ac:	0c 5f       	subi	r16, 0xFC	; 252
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	ff e3       	ldi	r31, 0x3F	; 63
 7b2:	f9 83       	std	Y+1, r31	; 0x01
 7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <vfprintf+0x11c>
 7b6:	83 36       	cpi	r24, 0x63	; 99
 7b8:	31 f0       	breq	.+12     	; 0x7c6 <vfprintf+0x112>
 7ba:	83 37       	cpi	r24, 0x73	; 115
 7bc:	71 f0       	breq	.+28     	; 0x7da <vfprintf+0x126>
 7be:	83 35       	cpi	r24, 0x53	; 83
 7c0:	09 f0       	breq	.+2      	; 0x7c4 <vfprintf+0x110>
 7c2:	60 c0       	rjmp	.+192    	; 0x884 <__stack+0x25>
 7c4:	22 c0       	rjmp	.+68     	; 0x80a <vfprintf+0x156>
 7c6:	f8 01       	movw	r30, r16
 7c8:	80 81       	ld	r24, Z
 7ca:	89 83       	std	Y+1, r24	; 0x01
 7cc:	0e 5f       	subi	r16, 0xFE	; 254
 7ce:	1f 4f       	sbci	r17, 0xFF	; 255
 7d0:	42 01       	movw	r8, r4
 7d2:	71 e0       	ldi	r23, 0x01	; 1
 7d4:	a7 2e       	mov	r10, r23
 7d6:	b1 2c       	mov	r11, r1
 7d8:	16 c0       	rjmp	.+44     	; 0x806 <vfprintf+0x152>
 7da:	62 e0       	ldi	r22, 0x02	; 2
 7dc:	66 2e       	mov	r6, r22
 7de:	71 2c       	mov	r7, r1
 7e0:	60 0e       	add	r6, r16
 7e2:	71 1e       	adc	r7, r17
 7e4:	f8 01       	movw	r30, r16
 7e6:	80 80       	ld	r8, Z
 7e8:	91 80       	ldd	r9, Z+1	; 0x01
 7ea:	26 ff       	sbrs	r18, 6
 7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <vfprintf+0x140>
 7ee:	6e 2d       	mov	r22, r14
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <vfprintf+0x144>
 7f4:	6f ef       	ldi	r22, 0xFF	; 255
 7f6:	7f ef       	ldi	r23, 0xFF	; 255
 7f8:	c4 01       	movw	r24, r8
 7fa:	2c 87       	std	Y+12, r18	; 0x0c
 7fc:	0e 94 4c 05 	call	0xa98	; 0xa98 <strnlen>
 800:	5c 01       	movw	r10, r24
 802:	83 01       	movw	r16, r6
 804:	2c 85       	ldd	r18, Y+12	; 0x0c
 806:	2f 77       	andi	r18, 0x7F	; 127
 808:	17 c0       	rjmp	.+46     	; 0x838 <vfprintf+0x184>
 80a:	52 e0       	ldi	r21, 0x02	; 2
 80c:	65 2e       	mov	r6, r21
 80e:	71 2c       	mov	r7, r1
 810:	60 0e       	add	r6, r16
 812:	71 1e       	adc	r7, r17
 814:	f8 01       	movw	r30, r16
 816:	80 80       	ld	r8, Z
 818:	91 80       	ldd	r9, Z+1	; 0x01
 81a:	26 ff       	sbrs	r18, 6
 81c:	03 c0       	rjmp	.+6      	; 0x824 <vfprintf+0x170>
 81e:	6e 2d       	mov	r22, r14
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	02 c0       	rjmp	.+4      	; 0x828 <vfprintf+0x174>
 824:	6f ef       	ldi	r22, 0xFF	; 255
 826:	7f ef       	ldi	r23, 0xFF	; 255
 828:	c4 01       	movw	r24, r8
 82a:	2c 87       	std	Y+12, r18	; 0x0c
 82c:	0e 94 41 05 	call	0xa82	; 0xa82 <strnlen_P>
 830:	5c 01       	movw	r10, r24
 832:	2c 85       	ldd	r18, Y+12	; 0x0c
 834:	20 68       	ori	r18, 0x80	; 128
 836:	83 01       	movw	r16, r6
 838:	23 fd       	sbrc	r18, 3
 83a:	20 c0       	rjmp	.+64     	; 0x87c <__stack+0x1d>
 83c:	08 c0       	rjmp	.+16     	; 0x84e <vfprintf+0x19a>
 83e:	80 e2       	ldi	r24, 0x20	; 32
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	b6 01       	movw	r22, r12
 844:	2c 87       	std	Y+12, r18	; 0x0c
 846:	0e 94 57 05 	call	0xaae	; 0xaae <fputc>
 84a:	fa 94       	dec	r15
 84c:	2c 85       	ldd	r18, Y+12	; 0x0c
 84e:	8f 2d       	mov	r24, r15
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	a8 16       	cp	r10, r24
 854:	b9 06       	cpc	r11, r25
 856:	98 f3       	brcs	.-26     	; 0x83e <vfprintf+0x18a>
 858:	11 c0       	rjmp	.+34     	; 0x87c <__stack+0x1d>
 85a:	f4 01       	movw	r30, r8
 85c:	27 fd       	sbrc	r18, 7
 85e:	85 91       	lpm	r24, Z+
 860:	27 ff       	sbrs	r18, 7
 862:	81 91       	ld	r24, Z+
 864:	4f 01       	movw	r8, r30
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	b6 01       	movw	r22, r12
 86a:	2c 87       	std	Y+12, r18	; 0x0c
 86c:	0e 94 57 05 	call	0xaae	; 0xaae <fputc>
 870:	2c 85       	ldd	r18, Y+12	; 0x0c
 872:	f1 10       	cpse	r15, r1
 874:	fa 94       	dec	r15
 876:	08 94       	sec
 878:	a1 08       	sbc	r10, r1
 87a:	b1 08       	sbc	r11, r1
 87c:	a1 14       	cp	r10, r1
 87e:	b1 04       	cpc	r11, r1
 880:	61 f7       	brne	.-40     	; 0x85a <vfprintf+0x1a6>
 882:	f1 c0       	rjmp	.+482    	; 0xa66 <__stack+0x207>
 884:	84 36       	cpi	r24, 0x64	; 100
 886:	11 f0       	breq	.+4      	; 0x88c <__stack+0x2d>
 888:	89 36       	cpi	r24, 0x69	; 105
 88a:	49 f5       	brne	.+82     	; 0x8de <__stack+0x7f>
 88c:	27 ff       	sbrs	r18, 7
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <__stack+0x41>
 890:	f8 01       	movw	r30, r16
 892:	60 81       	ld	r22, Z
 894:	71 81       	ldd	r23, Z+1	; 0x01
 896:	82 81       	ldd	r24, Z+2	; 0x02
 898:	93 81       	ldd	r25, Z+3	; 0x03
 89a:	0c 5f       	subi	r16, 0xFC	; 252
 89c:	1f 4f       	sbci	r17, 0xFF	; 255
 89e:	09 c0       	rjmp	.+18     	; 0x8b2 <__stack+0x53>
 8a0:	f8 01       	movw	r30, r16
 8a2:	60 81       	ld	r22, Z
 8a4:	71 81       	ldd	r23, Z+1	; 0x01
 8a6:	88 27       	eor	r24, r24
 8a8:	77 fd       	sbrc	r23, 7
 8aa:	80 95       	com	r24
 8ac:	98 2f       	mov	r25, r24
 8ae:	0e 5f       	subi	r16, 0xFE	; 254
 8b0:	1f 4f       	sbci	r17, 0xFF	; 255
 8b2:	4f e6       	ldi	r20, 0x6F	; 111
 8b4:	b4 2e       	mov	r11, r20
 8b6:	b2 22       	and	r11, r18
 8b8:	97 ff       	sbrs	r25, 7
 8ba:	09 c0       	rjmp	.+18     	; 0x8ce <__stack+0x6f>
 8bc:	90 95       	com	r25
 8be:	80 95       	com	r24
 8c0:	70 95       	com	r23
 8c2:	61 95       	neg	r22
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	8f 4f       	sbci	r24, 0xFF	; 255
 8c8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ca:	f0 e8       	ldi	r31, 0x80	; 128
 8cc:	bf 2a       	or	r11, r31
 8ce:	a2 01       	movw	r20, r4
 8d0:	2a e0       	ldi	r18, 0x0A	; 10
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	0e 94 83 05 	call	0xb06	; 0xb06 <__ultoa_invert>
 8d8:	78 2e       	mov	r7, r24
 8da:	74 18       	sub	r7, r4
 8dc:	45 c0       	rjmp	.+138    	; 0x968 <__stack+0x109>
 8de:	85 37       	cpi	r24, 0x75	; 117
 8e0:	31 f4       	brne	.+12     	; 0x8ee <__stack+0x8f>
 8e2:	3f ee       	ldi	r19, 0xEF	; 239
 8e4:	b3 2e       	mov	r11, r19
 8e6:	b2 22       	and	r11, r18
 8e8:	2a e0       	ldi	r18, 0x0A	; 10
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	25 c0       	rjmp	.+74     	; 0x938 <__stack+0xd9>
 8ee:	99 ef       	ldi	r25, 0xF9	; 249
 8f0:	b9 2e       	mov	r11, r25
 8f2:	b2 22       	and	r11, r18
 8f4:	8f 36       	cpi	r24, 0x6F	; 111
 8f6:	c1 f0       	breq	.+48     	; 0x928 <__stack+0xc9>
 8f8:	80 37       	cpi	r24, 0x70	; 112
 8fa:	20 f4       	brcc	.+8      	; 0x904 <__stack+0xa5>
 8fc:	88 35       	cpi	r24, 0x58	; 88
 8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0xa3>
 900:	b5 c0       	rjmp	.+362    	; 0xa6c <__stack+0x20d>
 902:	0d c0       	rjmp	.+26     	; 0x91e <__stack+0xbf>
 904:	80 37       	cpi	r24, 0x70	; 112
 906:	21 f0       	breq	.+8      	; 0x910 <__stack+0xb1>
 908:	88 37       	cpi	r24, 0x78	; 120
 90a:	09 f0       	breq	.+2      	; 0x90e <__stack+0xaf>
 90c:	af c0       	rjmp	.+350    	; 0xa6c <__stack+0x20d>
 90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0xb5>
 910:	20 e1       	ldi	r18, 0x10	; 16
 912:	b2 2a       	or	r11, r18
 914:	b4 fe       	sbrs	r11, 4
 916:	0b c0       	rjmp	.+22     	; 0x92e <__stack+0xcf>
 918:	84 e0       	ldi	r24, 0x04	; 4
 91a:	b8 2a       	or	r11, r24
 91c:	08 c0       	rjmp	.+16     	; 0x92e <__stack+0xcf>
 91e:	b4 fe       	sbrs	r11, 4
 920:	09 c0       	rjmp	.+18     	; 0x934 <__stack+0xd5>
 922:	e6 e0       	ldi	r30, 0x06	; 6
 924:	be 2a       	or	r11, r30
 926:	06 c0       	rjmp	.+12     	; 0x934 <__stack+0xd5>
 928:	28 e0       	ldi	r18, 0x08	; 8
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	05 c0       	rjmp	.+10     	; 0x938 <__stack+0xd9>
 92e:	20 e1       	ldi	r18, 0x10	; 16
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0xd9>
 934:	20 e1       	ldi	r18, 0x10	; 16
 936:	32 e0       	ldi	r19, 0x02	; 2
 938:	b7 fe       	sbrs	r11, 7
 93a:	08 c0       	rjmp	.+16     	; 0x94c <__stack+0xed>
 93c:	f8 01       	movw	r30, r16
 93e:	60 81       	ld	r22, Z
 940:	71 81       	ldd	r23, Z+1	; 0x01
 942:	82 81       	ldd	r24, Z+2	; 0x02
 944:	93 81       	ldd	r25, Z+3	; 0x03
 946:	0c 5f       	subi	r16, 0xFC	; 252
 948:	1f 4f       	sbci	r17, 0xFF	; 255
 94a:	07 c0       	rjmp	.+14     	; 0x95a <__stack+0xfb>
 94c:	f8 01       	movw	r30, r16
 94e:	60 81       	ld	r22, Z
 950:	71 81       	ldd	r23, Z+1	; 0x01
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 5f       	subi	r16, 0xFE	; 254
 958:	1f 4f       	sbci	r17, 0xFF	; 255
 95a:	a2 01       	movw	r20, r4
 95c:	0e 94 83 05 	call	0xb06	; 0xb06 <__ultoa_invert>
 960:	78 2e       	mov	r7, r24
 962:	74 18       	sub	r7, r4
 964:	ff e7       	ldi	r31, 0x7F	; 127
 966:	bf 22       	and	r11, r31
 968:	b6 fe       	sbrs	r11, 6
 96a:	0b c0       	rjmp	.+22     	; 0x982 <__stack+0x123>
 96c:	2e ef       	ldi	r18, 0xFE	; 254
 96e:	b2 22       	and	r11, r18
 970:	7e 14       	cp	r7, r14
 972:	38 f4       	brcc	.+14     	; 0x982 <__stack+0x123>
 974:	b4 fe       	sbrs	r11, 4
 976:	07 c0       	rjmp	.+14     	; 0x986 <__stack+0x127>
 978:	b2 fc       	sbrc	r11, 2
 97a:	05 c0       	rjmp	.+10     	; 0x986 <__stack+0x127>
 97c:	8f ee       	ldi	r24, 0xEF	; 239
 97e:	b8 22       	and	r11, r24
 980:	02 c0       	rjmp	.+4      	; 0x986 <__stack+0x127>
 982:	a7 2c       	mov	r10, r7
 984:	01 c0       	rjmp	.+2      	; 0x988 <__stack+0x129>
 986:	ae 2c       	mov	r10, r14
 988:	8b 2d       	mov	r24, r11
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	b4 fe       	sbrs	r11, 4
 98e:	0d c0       	rjmp	.+26     	; 0x9aa <__stack+0x14b>
 990:	fe 01       	movw	r30, r28
 992:	e7 0d       	add	r30, r7
 994:	f1 1d       	adc	r31, r1
 996:	20 81       	ld	r18, Z
 998:	20 33       	cpi	r18, 0x30	; 48
 99a:	19 f4       	brne	.+6      	; 0x9a2 <__stack+0x143>
 99c:	e9 ee       	ldi	r30, 0xE9	; 233
 99e:	be 22       	and	r11, r30
 9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <__stack+0x155>
 9a2:	a3 94       	inc	r10
 9a4:	b2 fe       	sbrs	r11, 2
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <__stack+0x155>
 9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__stack+0x153>
 9aa:	86 78       	andi	r24, 0x86	; 134
 9ac:	90 70       	andi	r25, 0x00	; 0
 9ae:	00 97       	sbiw	r24, 0x00	; 0
 9b0:	09 f0       	breq	.+2      	; 0x9b4 <__stack+0x155>
 9b2:	a3 94       	inc	r10
 9b4:	8b 2c       	mov	r8, r11
 9b6:	99 24       	eor	r9, r9
 9b8:	b3 fc       	sbrc	r11, 3
 9ba:	14 c0       	rjmp	.+40     	; 0x9e4 <__stack+0x185>
 9bc:	b0 fe       	sbrs	r11, 0
 9be:	0f c0       	rjmp	.+30     	; 0x9de <__stack+0x17f>
 9c0:	af 14       	cp	r10, r15
 9c2:	28 f4       	brcc	.+10     	; 0x9ce <__stack+0x16f>
 9c4:	e7 2c       	mov	r14, r7
 9c6:	ef 0c       	add	r14, r15
 9c8:	ea 18       	sub	r14, r10
 9ca:	af 2c       	mov	r10, r15
 9cc:	08 c0       	rjmp	.+16     	; 0x9de <__stack+0x17f>
 9ce:	e7 2c       	mov	r14, r7
 9d0:	06 c0       	rjmp	.+12     	; 0x9de <__stack+0x17f>
 9d2:	80 e2       	ldi	r24, 0x20	; 32
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	b6 01       	movw	r22, r12
 9d8:	0e 94 57 05 	call	0xaae	; 0xaae <fputc>
 9dc:	a3 94       	inc	r10
 9de:	af 14       	cp	r10, r15
 9e0:	c0 f3       	brcs	.-16     	; 0x9d2 <__stack+0x173>
 9e2:	04 c0       	rjmp	.+8      	; 0x9ec <__stack+0x18d>
 9e4:	af 14       	cp	r10, r15
 9e6:	10 f4       	brcc	.+4      	; 0x9ec <__stack+0x18d>
 9e8:	fa 18       	sub	r15, r10
 9ea:	01 c0       	rjmp	.+2      	; 0x9ee <__stack+0x18f>
 9ec:	ff 24       	eor	r15, r15
 9ee:	84 fe       	sbrs	r8, 4
 9f0:	0f c0       	rjmp	.+30     	; 0xa10 <__stack+0x1b1>
 9f2:	80 e3       	ldi	r24, 0x30	; 48
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	b6 01       	movw	r22, r12
 9f8:	0e 94 57 05 	call	0xaae	; 0xaae <fputc>
 9fc:	82 fe       	sbrs	r8, 2
 9fe:	1f c0       	rjmp	.+62     	; 0xa3e <__stack+0x1df>
 a00:	81 fe       	sbrs	r8, 1
 a02:	03 c0       	rjmp	.+6      	; 0xa0a <__stack+0x1ab>
 a04:	88 e5       	ldi	r24, 0x58	; 88
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	10 c0       	rjmp	.+32     	; 0xa2a <__stack+0x1cb>
 a0a:	88 e7       	ldi	r24, 0x78	; 120
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	0d c0       	rjmp	.+26     	; 0xa2a <__stack+0x1cb>
 a10:	c4 01       	movw	r24, r8
 a12:	86 78       	andi	r24, 0x86	; 134
 a14:	90 70       	andi	r25, 0x00	; 0
 a16:	00 97       	sbiw	r24, 0x00	; 0
 a18:	91 f0       	breq	.+36     	; 0xa3e <__stack+0x1df>
 a1a:	81 fc       	sbrc	r8, 1
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <__stack+0x1c3>
 a1e:	80 e2       	ldi	r24, 0x20	; 32
 a20:	01 c0       	rjmp	.+2      	; 0xa24 <__stack+0x1c5>
 a22:	8b e2       	ldi	r24, 0x2B	; 43
 a24:	b7 fc       	sbrc	r11, 7
 a26:	8d e2       	ldi	r24, 0x2D	; 45
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	b6 01       	movw	r22, r12
 a2c:	0e 94 57 05 	call	0xaae	; 0xaae <fputc>
 a30:	06 c0       	rjmp	.+12     	; 0xa3e <__stack+0x1df>
 a32:	80 e3       	ldi	r24, 0x30	; 48
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	b6 01       	movw	r22, r12
 a38:	0e 94 57 05 	call	0xaae	; 0xaae <fputc>
 a3c:	ea 94       	dec	r14
 a3e:	7e 14       	cp	r7, r14
 a40:	c0 f3       	brcs	.-16     	; 0xa32 <__stack+0x1d3>
 a42:	7a 94       	dec	r7
 a44:	f2 01       	movw	r30, r4
 a46:	e7 0d       	add	r30, r7
 a48:	f1 1d       	adc	r31, r1
 a4a:	80 81       	ld	r24, Z
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	b6 01       	movw	r22, r12
 a50:	0e 94 57 05 	call	0xaae	; 0xaae <fputc>
 a54:	77 20       	and	r7, r7
 a56:	a9 f7       	brne	.-22     	; 0xa42 <__stack+0x1e3>
 a58:	06 c0       	rjmp	.+12     	; 0xa66 <__stack+0x207>
 a5a:	80 e2       	ldi	r24, 0x20	; 32
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	b6 01       	movw	r22, r12
 a60:	0e 94 57 05 	call	0xaae	; 0xaae <fputc>
 a64:	fa 94       	dec	r15
 a66:	ff 20       	and	r15, r15
 a68:	c1 f7       	brne	.-16     	; 0xa5a <__stack+0x1fb>
 a6a:	37 ce       	rjmp	.-914    	; 0x6da <vfprintf+0x26>
 a6c:	f6 01       	movw	r30, r12
 a6e:	26 81       	ldd	r18, Z+6	; 0x06
 a70:	37 81       	ldd	r19, Z+7	; 0x07
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <__stack+0x219>
 a74:	2f ef       	ldi	r18, 0xFF	; 255
 a76:	3f ef       	ldi	r19, 0xFF	; 255
 a78:	c9 01       	movw	r24, r18
 a7a:	2c 96       	adiw	r28, 0x0c	; 12
 a7c:	e2 e1       	ldi	r30, 0x12	; 18
 a7e:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__epilogue_restores__>

00000a82 <strnlen_P>:
 a82:	fc 01       	movw	r30, r24
 a84:	05 90       	lpm	r0, Z+
 a86:	61 50       	subi	r22, 0x01	; 1
 a88:	70 40       	sbci	r23, 0x00	; 0
 a8a:	01 10       	cpse	r0, r1
 a8c:	d8 f7       	brcc	.-10     	; 0xa84 <strnlen_P+0x2>
 a8e:	80 95       	com	r24
 a90:	90 95       	com	r25
 a92:	8e 0f       	add	r24, r30
 a94:	9f 1f       	adc	r25, r31
 a96:	08 95       	ret

00000a98 <strnlen>:
 a98:	fc 01       	movw	r30, r24
 a9a:	61 50       	subi	r22, 0x01	; 1
 a9c:	70 40       	sbci	r23, 0x00	; 0
 a9e:	01 90       	ld	r0, Z+
 aa0:	01 10       	cpse	r0, r1
 aa2:	d8 f7       	brcc	.-10     	; 0xa9a <strnlen+0x2>
 aa4:	80 95       	com	r24
 aa6:	90 95       	com	r25
 aa8:	8e 0f       	add	r24, r30
 aaa:	9f 1f       	adc	r25, r31
 aac:	08 95       	ret

00000aae <fputc>:
 aae:	0f 93       	push	r16
 ab0:	1f 93       	push	r17
 ab2:	cf 93       	push	r28
 ab4:	df 93       	push	r29
 ab6:	8c 01       	movw	r16, r24
 ab8:	eb 01       	movw	r28, r22
 aba:	8b 81       	ldd	r24, Y+3	; 0x03
 abc:	81 ff       	sbrs	r24, 1
 abe:	1b c0       	rjmp	.+54     	; 0xaf6 <fputc+0x48>
 ac0:	82 ff       	sbrs	r24, 2
 ac2:	0d c0       	rjmp	.+26     	; 0xade <fputc+0x30>
 ac4:	2e 81       	ldd	r18, Y+6	; 0x06
 ac6:	3f 81       	ldd	r19, Y+7	; 0x07
 ac8:	8c 81       	ldd	r24, Y+4	; 0x04
 aca:	9d 81       	ldd	r25, Y+5	; 0x05
 acc:	28 17       	cp	r18, r24
 ace:	39 07       	cpc	r19, r25
 ad0:	64 f4       	brge	.+24     	; 0xaea <fputc+0x3c>
 ad2:	e8 81       	ld	r30, Y
 ad4:	f9 81       	ldd	r31, Y+1	; 0x01
 ad6:	01 93       	st	Z+, r16
 ad8:	f9 83       	std	Y+1, r31	; 0x01
 ada:	e8 83       	st	Y, r30
 adc:	06 c0       	rjmp	.+12     	; 0xaea <fputc+0x3c>
 ade:	e8 85       	ldd	r30, Y+8	; 0x08
 ae0:	f9 85       	ldd	r31, Y+9	; 0x09
 ae2:	80 2f       	mov	r24, r16
 ae4:	09 95       	icall
 ae6:	00 97       	sbiw	r24, 0x00	; 0
 ae8:	31 f4       	brne	.+12     	; 0xaf6 <fputc+0x48>
 aea:	8e 81       	ldd	r24, Y+6	; 0x06
 aec:	9f 81       	ldd	r25, Y+7	; 0x07
 aee:	01 96       	adiw	r24, 0x01	; 1
 af0:	9f 83       	std	Y+7, r25	; 0x07
 af2:	8e 83       	std	Y+6, r24	; 0x06
 af4:	02 c0       	rjmp	.+4      	; 0xafa <fputc+0x4c>
 af6:	0f ef       	ldi	r16, 0xFF	; 255
 af8:	1f ef       	ldi	r17, 0xFF	; 255
 afa:	c8 01       	movw	r24, r16
 afc:	df 91       	pop	r29
 afe:	cf 91       	pop	r28
 b00:	1f 91       	pop	r17
 b02:	0f 91       	pop	r16
 b04:	08 95       	ret

00000b06 <__ultoa_invert>:
 b06:	fa 01       	movw	r30, r20
 b08:	aa 27       	eor	r26, r26
 b0a:	28 30       	cpi	r18, 0x08	; 8
 b0c:	51 f1       	breq	.+84     	; 0xb62 <__ultoa_invert+0x5c>
 b0e:	20 31       	cpi	r18, 0x10	; 16
 b10:	81 f1       	breq	.+96     	; 0xb72 <__ultoa_invert+0x6c>
 b12:	e8 94       	clt
 b14:	6f 93       	push	r22
 b16:	6e 7f       	andi	r22, 0xFE	; 254
 b18:	6e 5f       	subi	r22, 0xFE	; 254
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	af 4f       	sbci	r26, 0xFF	; 255
 b22:	b1 e0       	ldi	r27, 0x01	; 1
 b24:	3e d0       	rcall	.+124    	; 0xba2 <__ultoa_invert+0x9c>
 b26:	b4 e0       	ldi	r27, 0x04	; 4
 b28:	3c d0       	rcall	.+120    	; 0xba2 <__ultoa_invert+0x9c>
 b2a:	67 0f       	add	r22, r23
 b2c:	78 1f       	adc	r23, r24
 b2e:	89 1f       	adc	r24, r25
 b30:	9a 1f       	adc	r25, r26
 b32:	a1 1d       	adc	r26, r1
 b34:	68 0f       	add	r22, r24
 b36:	79 1f       	adc	r23, r25
 b38:	8a 1f       	adc	r24, r26
 b3a:	91 1d       	adc	r25, r1
 b3c:	a1 1d       	adc	r26, r1
 b3e:	6a 0f       	add	r22, r26
 b40:	71 1d       	adc	r23, r1
 b42:	81 1d       	adc	r24, r1
 b44:	91 1d       	adc	r25, r1
 b46:	a1 1d       	adc	r26, r1
 b48:	20 d0       	rcall	.+64     	; 0xb8a <__ultoa_invert+0x84>
 b4a:	09 f4       	brne	.+2      	; 0xb4e <__ultoa_invert+0x48>
 b4c:	68 94       	set
 b4e:	3f 91       	pop	r19
 b50:	2a e0       	ldi	r18, 0x0A	; 10
 b52:	26 9f       	mul	r18, r22
 b54:	11 24       	eor	r1, r1
 b56:	30 19       	sub	r19, r0
 b58:	30 5d       	subi	r19, 0xD0	; 208
 b5a:	31 93       	st	Z+, r19
 b5c:	de f6       	brtc	.-74     	; 0xb14 <__ultoa_invert+0xe>
 b5e:	cf 01       	movw	r24, r30
 b60:	08 95       	ret
 b62:	46 2f       	mov	r20, r22
 b64:	47 70       	andi	r20, 0x07	; 7
 b66:	40 5d       	subi	r20, 0xD0	; 208
 b68:	41 93       	st	Z+, r20
 b6a:	b3 e0       	ldi	r27, 0x03	; 3
 b6c:	0f d0       	rcall	.+30     	; 0xb8c <__ultoa_invert+0x86>
 b6e:	c9 f7       	brne	.-14     	; 0xb62 <__ultoa_invert+0x5c>
 b70:	f6 cf       	rjmp	.-20     	; 0xb5e <__ultoa_invert+0x58>
 b72:	46 2f       	mov	r20, r22
 b74:	4f 70       	andi	r20, 0x0F	; 15
 b76:	40 5d       	subi	r20, 0xD0	; 208
 b78:	4a 33       	cpi	r20, 0x3A	; 58
 b7a:	18 f0       	brcs	.+6      	; 0xb82 <__ultoa_invert+0x7c>
 b7c:	49 5d       	subi	r20, 0xD9	; 217
 b7e:	31 fd       	sbrc	r19, 1
 b80:	40 52       	subi	r20, 0x20	; 32
 b82:	41 93       	st	Z+, r20
 b84:	02 d0       	rcall	.+4      	; 0xb8a <__ultoa_invert+0x84>
 b86:	a9 f7       	brne	.-22     	; 0xb72 <__ultoa_invert+0x6c>
 b88:	ea cf       	rjmp	.-44     	; 0xb5e <__ultoa_invert+0x58>
 b8a:	b4 e0       	ldi	r27, 0x04	; 4
 b8c:	a6 95       	lsr	r26
 b8e:	97 95       	ror	r25
 b90:	87 95       	ror	r24
 b92:	77 95       	ror	r23
 b94:	67 95       	ror	r22
 b96:	ba 95       	dec	r27
 b98:	c9 f7       	brne	.-14     	; 0xb8c <__ultoa_invert+0x86>
 b9a:	00 97       	sbiw	r24, 0x00	; 0
 b9c:	61 05       	cpc	r22, r1
 b9e:	71 05       	cpc	r23, r1
 ba0:	08 95       	ret
 ba2:	9b 01       	movw	r18, r22
 ba4:	ac 01       	movw	r20, r24
 ba6:	0a 2e       	mov	r0, r26
 ba8:	06 94       	lsr	r0
 baa:	57 95       	ror	r21
 bac:	47 95       	ror	r20
 bae:	37 95       	ror	r19
 bb0:	27 95       	ror	r18
 bb2:	ba 95       	dec	r27
 bb4:	c9 f7       	brne	.-14     	; 0xba8 <__ultoa_invert+0xa2>
 bb6:	62 0f       	add	r22, r18
 bb8:	73 1f       	adc	r23, r19
 bba:	84 1f       	adc	r24, r20
 bbc:	95 1f       	adc	r25, r21
 bbe:	a0 1d       	adc	r26, r0
 bc0:	08 95       	ret

00000bc2 <__prologue_saves__>:
 bc2:	2f 92       	push	r2
 bc4:	3f 92       	push	r3
 bc6:	4f 92       	push	r4
 bc8:	5f 92       	push	r5
 bca:	6f 92       	push	r6
 bcc:	7f 92       	push	r7
 bce:	8f 92       	push	r8
 bd0:	9f 92       	push	r9
 bd2:	af 92       	push	r10
 bd4:	bf 92       	push	r11
 bd6:	cf 92       	push	r12
 bd8:	df 92       	push	r13
 bda:	ef 92       	push	r14
 bdc:	ff 92       	push	r15
 bde:	0f 93       	push	r16
 be0:	1f 93       	push	r17
 be2:	cf 93       	push	r28
 be4:	df 93       	push	r29
 be6:	cd b7       	in	r28, 0x3d	; 61
 be8:	de b7       	in	r29, 0x3e	; 62
 bea:	ca 1b       	sub	r28, r26
 bec:	db 0b       	sbc	r29, r27
 bee:	0f b6       	in	r0, 0x3f	; 63
 bf0:	f8 94       	cli
 bf2:	de bf       	out	0x3e, r29	; 62
 bf4:	0f be       	out	0x3f, r0	; 63
 bf6:	cd bf       	out	0x3d, r28	; 61
 bf8:	09 94       	ijmp

00000bfa <__epilogue_restores__>:
 bfa:	2a 88       	ldd	r2, Y+18	; 0x12
 bfc:	39 88       	ldd	r3, Y+17	; 0x11
 bfe:	48 88       	ldd	r4, Y+16	; 0x10
 c00:	5f 84       	ldd	r5, Y+15	; 0x0f
 c02:	6e 84       	ldd	r6, Y+14	; 0x0e
 c04:	7d 84       	ldd	r7, Y+13	; 0x0d
 c06:	8c 84       	ldd	r8, Y+12	; 0x0c
 c08:	9b 84       	ldd	r9, Y+11	; 0x0b
 c0a:	aa 84       	ldd	r10, Y+10	; 0x0a
 c0c:	b9 84       	ldd	r11, Y+9	; 0x09
 c0e:	c8 84       	ldd	r12, Y+8	; 0x08
 c10:	df 80       	ldd	r13, Y+7	; 0x07
 c12:	ee 80       	ldd	r14, Y+6	; 0x06
 c14:	fd 80       	ldd	r15, Y+5	; 0x05
 c16:	0c 81       	ldd	r16, Y+4	; 0x04
 c18:	1b 81       	ldd	r17, Y+3	; 0x03
 c1a:	aa 81       	ldd	r26, Y+2	; 0x02
 c1c:	b9 81       	ldd	r27, Y+1	; 0x01
 c1e:	ce 0f       	add	r28, r30
 c20:	d1 1d       	adc	r29, r1
 c22:	0f b6       	in	r0, 0x3f	; 63
 c24:	f8 94       	cli
 c26:	de bf       	out	0x3e, r29	; 62
 c28:	0f be       	out	0x3f, r0	; 63
 c2a:	cd bf       	out	0x3d, r28	; 61
 c2c:	ed 01       	movw	r28, r26
 c2e:	08 95       	ret

00000c30 <_exit>:
 c30:	f8 94       	cli

00000c32 <__stop_program>:
 c32:	ff cf       	rjmp	.-2      	; 0xc32 <__stop_program>
