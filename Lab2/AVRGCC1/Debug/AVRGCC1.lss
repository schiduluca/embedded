
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000206  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  000002b0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000fd  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000076e  00000000  00000000  00000ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000488  00000000  00000000  00001317  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000859  00000000  00000000  0000179f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  00001ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000273  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000017a  00000000  00000000  0000234b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000ee  00000000  00000000  000024c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000010  00000000  00000000  000025b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  8a:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
 *  Author: schid
 */ 
#include "button.h"

void init() {
	DDRC &= ~(1 << PORTC5) ;
  92:	a5 98       	cbi	0x14, 5	; 20
}
  94:	08 95       	ret

00000096 <isPressed>:

int isPressed() {
	return PINC & (1<<PORTC5);
  96:	23 b3       	in	r18, 0x13	; 19
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	20 72       	andi	r18, 0x20	; 32
  9c:	30 70       	andi	r19, 0x00	; 0
}
  9e:	82 2f       	mov	r24, r18
  a0:	93 2f       	mov	r25, r19
  a2:	08 95       	ret

000000a4 <initLed>:
 *  Author: schid
 */ 
#include "led.h"

void initLed() {
	DDRA |= (1 << PORTA0); 
  a4:	d0 9a       	sbi	0x1a, 0	; 26
}
  a6:	08 95       	ret

000000a8 <ledOn>:

void ledOn() {
	PORTA |= (1 << PORTA0); 
  a8:	d8 9a       	sbi	0x1b, 0	; 27
}
  aa:	08 95       	ret

000000ac <ledOff>:

void ledOff() {
	PORTA &= ~(1 << PORTA0);
  ac:	d8 98       	cbi	0x1b, 0	; 27
  ae:	08 95       	ret

000000b0 <main>:
#include <avr/delay.h>


int main() {
	
	init();
  b0:	0e 94 49 00 	call	0x92	; 0x92 <init>
	initLed();
  b4:	0e 94 52 00 	call	0xa4	; 0xa4 <initLed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	80 ef       	ldi	r24, 0xF0	; 240
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0xc>
	
	while(1) {
		_delay_ms(100);
		if(isPressed()) {
  c0:	0e 94 4b 00 	call	0x96	; 0x96 <isPressed>
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	19 f0       	breq	.+6      	; 0xce <main+0x1e>
			ledOn();
  c8:	0e 94 54 00 	call	0xa8	; 0xa8 <ledOn>
  cc:	f5 cf       	rjmp	.-22     	; 0xb8 <main+0x8>
		} else {
			ledOff();
  ce:	0e 94 56 00 	call	0xac	; 0xac <ledOff>
  d2:	f2 cf       	rjmp	.-28     	; 0xb8 <main+0x8>

000000d4 <uart_stdio_PutChar>:
#include "uart_studio.h"
#define UART_BAUD 9600

FILE uart_output = FDEV_SETUP_STREAM(uart_stdio_PutChar, NULL, _FDEV_SETUP_WRITE);

int uart_stdio_PutChar(char c, FILE *stream) {
  d4:	1f 93       	push	r17
  d6:	18 2f       	mov	r17, r24

  if (c == '\a') {
  d8:	87 30       	cpi	r24, 0x07	; 7
  da:	69 f4       	brne	.+26     	; 0xf6 <uart_stdio_PutChar+0x22>
      fputs("*ring*\n", stderr);
  dc:	20 91 7a 00 	lds	r18, 0x007A
  e0:	30 91 7b 00 	lds	r19, 0x007B
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	47 e0       	ldi	r20, 0x07	; 7
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	0e 94 94 00 	call	0x128	; 0x128 <fwrite>
      return 0;
  f4:	08 c0       	rjmp	.+16     	; 0x106 <uart_stdio_PutChar+0x32>
    }

  if (c == '\n')
  f6:	8a 30       	cpi	r24, 0x0A	; 10
  f8:	19 f4       	brne	.+6      	; 0x100 <uart_stdio_PutChar+0x2c>
    uart_stdio_PutChar('\r', stream);
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	0e 94 6a 00 	call	0xd4	; 0xd4 <uart_stdio_PutChar>
  while(~UCSRA & (1 << UDRE));
 100:	5d 9b       	sbis	0x0b, 5	; 11
 102:	fe cf       	rjmp	.-4      	; 0x100 <uart_stdio_PutChar+0x2c>
  UDR = c;
 104:	1c b9       	out	0x0c, r17	; 12

  return 0;
}
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	1f 91       	pop	r17
 10c:	08 95       	ret

0000010e <uart_stdio_Init>:


void uart_stdio_Init(void) {
	#if F_CPU < 2000000UL && defined(U2X)
	  UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	8b b9       	out	0x0b, r24	; 11
	  UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	89 b9       	out	0x09, r24	; 9
	#else
	  UBRRL = (F_CPU / (16UL * UART_BAUD)) - 1;
	#endif
	  UCSRB = _BV(TXEN) | _BV(RXEN); /* tx/rx enable */
 116:	88 e1       	ldi	r24, 0x18	; 24
 118:	8a b9       	out	0x0a, r24	; 10

	  stdout = &uart_output;
 11a:	88 e6       	ldi	r24, 0x68	; 104
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 79 00 	sts	0x0079, r25
 122:	80 93 78 00 	sts	0x0078, r24
 126:	08 95       	ret

00000128 <fwrite>:
 128:	a0 e0       	ldi	r26, 0x00	; 0
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	ea e9       	ldi	r30, 0x9A	; 154
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__prologue_saves__+0xc>
 134:	4b 01       	movw	r8, r22
 136:	5a 01       	movw	r10, r20
 138:	69 01       	movw	r12, r18
 13a:	d9 01       	movw	r26, r18
 13c:	13 96       	adiw	r26, 0x03	; 3
 13e:	2c 91       	ld	r18, X
 140:	13 97       	sbiw	r26, 0x03	; 3
 142:	21 ff       	sbrs	r18, 1
 144:	1f c0       	rjmp	.+62     	; 0x184 <fwrite+0x5c>
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	14 c0       	rjmp	.+40     	; 0x174 <fwrite+0x4c>
 14c:	d6 01       	movw	r26, r12
 14e:	18 96       	adiw	r26, 0x08	; 8
 150:	ed 91       	ld	r30, X+
 152:	fc 91       	ld	r31, X
 154:	19 97       	sbiw	r26, 0x09	; 9
 156:	d8 01       	movw	r26, r16
 158:	8d 91       	ld	r24, X+
 15a:	8d 01       	movw	r16, r26
 15c:	b6 01       	movw	r22, r12
 15e:	09 95       	icall
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	91 f4       	brne	.+36     	; 0x188 <fwrite+0x60>
 164:	08 94       	sec
 166:	e1 1c       	adc	r14, r1
 168:	f1 1c       	adc	r15, r1
 16a:	c8 01       	movw	r24, r16
 16c:	e8 14       	cp	r14, r8
 16e:	f9 04       	cpc	r15, r9
 170:	68 f3       	brcs	.-38     	; 0x14c <fwrite+0x24>
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	ca 15       	cp	r28, r10
 176:	db 05       	cpc	r29, r11
 178:	38 f4       	brcc	.+14     	; 0x188 <fwrite+0x60>
 17a:	08 2f       	mov	r16, r24
 17c:	19 2f       	mov	r17, r25
 17e:	ee 24       	eor	r14, r14
 180:	ff 24       	eor	r15, r15
 182:	f3 cf       	rjmp	.-26     	; 0x16a <fwrite+0x42>
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	ce 01       	movw	r24, r28
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	ec e0       	ldi	r30, 0x0C	; 12
 190:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__epilogue_restores__+0xc>

00000194 <__prologue_saves__>:
 194:	2f 92       	push	r2
 196:	3f 92       	push	r3
 198:	4f 92       	push	r4
 19a:	5f 92       	push	r5
 19c:	6f 92       	push	r6
 19e:	7f 92       	push	r7
 1a0:	8f 92       	push	r8
 1a2:	9f 92       	push	r9
 1a4:	af 92       	push	r10
 1a6:	bf 92       	push	r11
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	ca 1b       	sub	r28, r26
 1be:	db 0b       	sbc	r29, r27
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	09 94       	ijmp

000001cc <__epilogue_restores__>:
 1cc:	2a 88       	ldd	r2, Y+18	; 0x12
 1ce:	39 88       	ldd	r3, Y+17	; 0x11
 1d0:	48 88       	ldd	r4, Y+16	; 0x10
 1d2:	5f 84       	ldd	r5, Y+15	; 0x0f
 1d4:	6e 84       	ldd	r6, Y+14	; 0x0e
 1d6:	7d 84       	ldd	r7, Y+13	; 0x0d
 1d8:	8c 84       	ldd	r8, Y+12	; 0x0c
 1da:	9b 84       	ldd	r9, Y+11	; 0x0b
 1dc:	aa 84       	ldd	r10, Y+10	; 0x0a
 1de:	b9 84       	ldd	r11, Y+9	; 0x09
 1e0:	c8 84       	ldd	r12, Y+8	; 0x08
 1e2:	df 80       	ldd	r13, Y+7	; 0x07
 1e4:	ee 80       	ldd	r14, Y+6	; 0x06
 1e6:	fd 80       	ldd	r15, Y+5	; 0x05
 1e8:	0c 81       	ldd	r16, Y+4	; 0x04
 1ea:	1b 81       	ldd	r17, Y+3	; 0x03
 1ec:	aa 81       	ldd	r26, Y+2	; 0x02
 1ee:	b9 81       	ldd	r27, Y+1	; 0x01
 1f0:	ce 0f       	add	r28, r30
 1f2:	d1 1d       	adc	r29, r1
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
 1fe:	ed 01       	movw	r28, r26
 200:	08 95       	ret

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
